{"version":3,"sources":["Validation.js","Form1.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["validateFields","email","validator","isEmpty","isEmail","password","isLength","min","initialState","value","validateOnChange","error","submitCalled","allFieldsValidated","Form","props","state","validationFunc","evt","field","target","name","this","setState","fieldVal","preventDefault","emailError","validateEmail","passwordError","validatePassword","every","e","console","log","showAllFieldsValidated","setTimeout","className","onSubmit","handleSubmit","type","placeholder","classnames","onChange","handleChange","onBlur","handleBlur","onMouseDown","Component","App","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message","module","exports"],"mappings":"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","file":"static/js/main.f86e4f36.chunk.js","sourcesContent":["import validator from 'validator';\n\n/*\n * This class contains methods for validating fields using 'validator.js' library methods\n * The methods return error message if validation failed and false otherwise\n * You can use all supported validators and sanitizers of 'validator.js' libaray\n * See their docs here https://github.com/validatorjs/validator.js\n */\n\nclass ValidateFields {\n  /*\n   * A method that takes in the email\n   * Validates it\n   * Returns the response either error or false if there is no error\n   */\n  validateEmail(email) {\n    if (validator.isEmpty(email)) {\n      return 'Email is required';\n    } else if (!validator.isEmail(email)) {\n      return 'Invalid Email';\n    }\n    return false;\n  }\n\n  validatePassword(password) {\n    if (validator.isEmpty(password)) {\n      return 'Password is required';\n    } else if (!validator.isLength(password, { min: 8 })) {\n      return 'Password should be minimum 8 characters';\n    }\n    return false;\n  }\n}\n\nconst validateFields = new ValidateFields();\n\n// export the class instance, so we can import and use it anywhere\nexport { validateFields };\n","import React, { Component } from 'react';\r\nimport { validateFields } from './Validation';\r\nimport classnames from 'classnames';\r\n\r\nconst initialState = {\r\n  email: {\r\n    value: '',\r\n    validateOnChange: false,\r\n    error: ''\r\n  },\r\n  password: {\r\n    value: '',\r\n    validateOnChange: false,\r\n    error: ''\r\n  },\r\n  submitCalled: false,\r\n  allFieldsValidated: false\r\n};\r\n\r\nclass Form extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = initialState;\r\n  }\r\n\r\n  /*\r\n   * validates the field onBlur if sumbit button is not clicked\r\n   * set the validateOnChange to true for that field\r\n   * check for error\r\n   */\r\n  handleBlur(validationFunc, evt) {\r\n    const field = evt.target.name;\r\n    // validate onBlur only when validateOnChange for that field is false\r\n    // because if validateOnChange is already true there is no need to validate onBlur\r\n    if (\r\n      this.state[field]['validateOnChange'] === false &&\r\n      this.state.submitCalled === false\r\n    ) {\r\n      this.setState(state => ({\r\n        [field]: {\r\n          ...state[field],\r\n          validateOnChange: true,\r\n          error: validationFunc(state[field].value)\r\n        }\r\n      }));\r\n    }\r\n    return;\r\n  }\r\n\r\n  /*\r\n   * update the value in state for that field\r\n   * check for error if validateOnChange is true\r\n   */\r\n  handleChange(validationFunc, evt) {\r\n    const field = evt.target.name;\r\n    const fieldVal = evt.target.value;\r\n    this.setState(state => ({\r\n      [field]: {\r\n        ...state[field],\r\n        value: fieldVal,\r\n        error: state[field]['validateOnChange'] ? validationFunc(fieldVal) : ''\r\n      }\r\n    }));\r\n  }\r\n\r\n  /*\r\n   * validate all fields\r\n   * check if all fields are valid if yes then submit the Form\r\n   * otherwise set errors for the feilds in the state\r\n   */\r\n  handleSubmit(evt) {\r\n    evt.preventDefault();\r\n    // validate all fields\r\n    const { email, password } = this.state;\r\n    const emailError = validateFields.validateEmail(email.value);\r\n    const passwordError = validateFields.validatePassword(password.value);\r\n    if ([emailError, passwordError].every(e => e === false)) {\r\n      // no errors submit the form\r\n      console.log('success');\r\n\r\n      // clear state and show all fields are validated\r\n      this.setState({ ...initialState, allFieldsValidated: true });\r\n      this.showAllFieldsValidated();\r\n    } else {\r\n      // update the state with errors\r\n      this.setState(state => ({\r\n        email: {\r\n          ...state.email,\r\n          validateOnChange: true,\r\n          error: emailError\r\n        },\r\n        password: {\r\n          ...state.password,\r\n          validateOnChange: true,\r\n          error: passwordError\r\n        }\r\n      }));\r\n    }\r\n  }\r\n\r\n  showAllFieldsValidated() {\r\n    setTimeout(() => {\r\n      this.setState({ allFieldsValidated: false });\r\n    }, 1500);\r\n  }\r\n\r\n  render() {\r\n    const { email, password, allFieldsValidated } = this.state;\r\n    return (\r\n      <div className=\"Form col-md-8 col-lg-6\">\r\n        <div className=\"card shadow\">\r\n          <div className=\"card-header\">\r\n            <h4 className=\"text-center\">Form Validation React</h4>\r\n          </div>\r\n\r\n          <div className=\"card-body\">\r\n            {allFieldsValidated && (\r\n              <p className=\"text-success text-center\">\r\n                Success, All fields are validated\r\n              </p>\r\n            )}\r\n\r\n            {/* Form Starts Here */}\r\n            <form onSubmit={evt => this.handleSubmit(evt)}>\r\n              {/* Email field */}\r\n              <div className=\"form-group\">\r\n                <label>Email</label>\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"email\"\r\n                  value={email.value}\r\n                  placeholder=\"Enter your email\"\r\n                  className={classnames(\r\n                    'form-control',\r\n                    { 'is-valid': email.error === false },\r\n                    { 'is-invalid': email.error }\r\n                  )}\r\n                  onChange={evt =>\r\n                    this.handleChange(validateFields.validateEmail, evt)\r\n                  }\r\n                  onBlur={evt =>\r\n                    this.handleBlur(validateFields.validateEmail, evt)\r\n                  }\r\n                />\r\n                <div className=\"invalid-feedback\">{email.error}</div>\r\n              </div>\r\n\r\n              {/* Password field */}\r\n              <div className=\"form-group\">\r\n                <label>Password</label>\r\n                <input\r\n                  type=\"password\"\r\n                  name=\"password\"\r\n                  value={password.value}\r\n                  placeholder=\"Enter your password\"\r\n                  className={classnames(\r\n                    'form-control',\r\n                    { 'is-valid': password.error === false },\r\n                    { 'is-invalid': password.error }\r\n                  )}\r\n                  onChange={evt =>\r\n                    this.handleChange(validateFields.validatePassword, evt)\r\n                  }\r\n                  onBlur={evt =>\r\n                    this.handleBlur(validateFields.validatePassword, evt)\r\n                  }\r\n                />\r\n                <div className=\"invalid-feedback\">{password.error}</div>\r\n              </div>\r\n              <button\r\n                type=\"submit\"\r\n                className=\"btn btn-secondary btn-block\"\r\n                onMouseDown={() => this.setState({ submitCalled: true })}\r\n              >\r\n                Submit\r\n              </button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport Form from './Form1';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"App-content\">\n          <img src={logo} className=\"App-logo\" alt=\"React\" />\n          <Form />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}